/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vultureservices;

import java.awt.Component;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Dad
 */
public class dailyTask extends javax.swing.JFrame {

    /**
     * Creates new form dailyTask
     */
    public dailyTask() {
        initComponents();
        setLocationRelativeTo(null);
        String user = jlbUser.getText();
        jlbUser1.setText(user);
        jlbUser2.setText(user);
        jlbUser3.setText(user);
        DefaultTableModel model = (DefaultTableModel) jTUnassigned.getModel();
        DefaultTableModel model2 = (DefaultTableModel) jtAllTasks.getModel();
        DefaultTableModel model3 = (DefaultTableModel) jtOverdue.getModel();
        model.setRowCount(0);
        model2.setRowCount(0);
        model3.setRowCount(0);

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {
                String query = "SELECT * FROM unassigned_tasks";
                String query2 = "SELECT * FROM all_tasks";
                String query3 = "SELECT * FROM overdueTask";

                PreparedStatement ps = con.prepareStatement(query);
                PreparedStatement ps2 = con.prepareStatement(query2);
                PreparedStatement ps3 = con.prepareStatement(query3);

                ResultSet rs = ps.executeQuery();
                ResultSet rs2 = ps2.executeQuery();
                ResultSet rs3 = ps3.executeQuery();

                while (rs.next()) {
                    String taskid = rs.getString("task_id");
                    String task = rs.getString("task");
                    String notes = rs.getString("notes");
                    String time_needed = rs.getString("time_needed");
                    String assigned = rs.getString("assignedTo");
                    String date_assigned = rs.getString("date_assigned");
                    String completed = rs.getString("completed");
                    String date_completed = rs.getString("date_completed");
                    String time_used = rs.getString("time_used");
                    model.addRow(new Object[]{taskid, task, notes, time_needed, assigned, date_assigned, completed, date_completed, time_used});
                    jTUnassigned.setModel(model);
                }

                while (rs2.next()) {
                    String taskid2 = rs2.getString("task_id");
                    String task2 = rs2.getString("task");
                    String notes2 = rs2.getString("notes");
                    String time_needed2 = rs2.getString("time_needed");
                    String assigned2 = rs2.getString("assignedTo");
                    String dateAssigned2 = rs2.getString("date_assigned");
                    String completed2 = rs2.getString("completed");
                    model2.addRow(new Object[]{taskid2, task2, notes2, time_needed2, assigned2, dateAssigned2, completed2});
                    jtAllTasks.setModel(model2);
                }

                while (rs3.next()) {
                    String taskid3 = rs3.getString("task_id");
                    String task3 = rs3.getString("task");
                    String notes3 = rs3.getString("notes");
                    String time_needed3 = rs3.getString("time_needed");
                    String assigned3 = rs3.getString("assignedTo");
                    String date_assigned3 = rs3.getString("date_assigned");
                    String completed3 = rs3.getString("completed");
                    String date_completed3 = rs3.getString("date_completed");
                    String time_used3 = rs3.getString("time_used");
                    model3.addRow(new Object[]{taskid3, task3, notes3, time_needed3, assigned3, date_assigned3, completed3, date_completed3, time_used3});
                    jtOverdue.setModel(model3);
                }

            } catch (SQLException ex) {
                Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtAllTasks1 = new javax.swing.JTable();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbTask = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jlbUser = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jbChangeWeek1 = new javax.swing.JToggleButton();
        jLabel19 = new javax.swing.JLabel();
        jbChangeWeek4 = new javax.swing.JToggleButton();
        jbChangeWeek2 = new javax.swing.JToggleButton();
        jbChangeWeek3 = new javax.swing.JToggleButton();
        jbChangeWeek5 = new javax.swing.JToggleButton();
        jbAllTasks = new javax.swing.JToggleButton();
        jtMonthlyHours = new javax.swing.JTextField();
        jlHours = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTUnassigned = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jlbUser1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jBChooseTask = new javax.swing.JButton();
        jtfChooseTask = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jtfNotes = new javax.swing.JTextField();
        jtfTask = new javax.swing.JTextField();
        jtfTime = new javax.swing.JTextField();
        jtfDate = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtAllTasks = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jlbUser2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jtfTask2 = new javax.swing.JTextField();
        jtfNotes2 = new javax.swing.JTextField();
        jtfTime2 = new javax.swing.JTextField();
        jtfChooseTask2 = new javax.swing.JTextField();
        jtfDate2 = new javax.swing.JTextField();
        jBChooseTask2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jtfTask3 = new javax.swing.JTextField();
        jtfNotes3 = new javax.swing.JTextField();
        jtfTime3 = new javax.swing.JTextField();
        jtfChooseTask3 = new javax.swing.JTextField();
        jtfDate3 = new javax.swing.JTextField();
        jBChooseTask3 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jlbUser3 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jtOverdue = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();

        jMenuItem1.setText("jMenuItem1");

        jtAllTasks1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "task id", "Task", "Notes", "Time (Hours)", "Assigned To", "Date Assigned", "Completed"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtAllTasks1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtAllTasks1MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jtAllTasks1);
        if (jtAllTasks1.getColumnModel().getColumnCount() > 0) {
            jtAllTasks1.getColumnModel().getColumn(0).setResizable(false);
            jtAllTasks1.getColumnModel().getColumn(1).setResizable(false);
            jtAllTasks1.getColumnModel().getColumn(1).setPreferredWidth(250);
            jtAllTasks1.getColumnModel().getColumn(2).setResizable(false);
            jtAllTasks1.getColumnModel().getColumn(2).setPreferredWidth(250);
            jtAllTasks1.getColumnModel().getColumn(3).setResizable(false);
            jtAllTasks1.getColumnModel().getColumn(4).setResizable(false);
            jtAllTasks1.getColumnModel().getColumn(5).setResizable(false);
            jtAllTasks1.getColumnModel().getColumn(6).setResizable(false);
        }

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtbTask.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Task", "Notes", "Time (Hours)", "Assigned To", "Date Assigned", "Completed", "Date Completed", "Time Used"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbTask.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jtbTask);
        if (jtbTask.getColumnModel().getColumnCount() > 0) {
            jtbTask.getColumnModel().getColumn(0).setResizable(false);
            jtbTask.getColumnModel().getColumn(0).setPreferredWidth(250);
            jtbTask.getColumnModel().getColumn(1).setResizable(false);
            jtbTask.getColumnModel().getColumn(1).setPreferredWidth(250);
            jtbTask.getColumnModel().getColumn(2).setResizable(false);
            jtbTask.getColumnModel().getColumn(3).setResizable(false);
            jtbTask.getColumnModel().getColumn(4).setResizable(false);
            jtbTask.getColumnModel().getColumn(5).setResizable(false);
            jtbTask.getColumnModel().getColumn(6).setResizable(false);
            jtbTask.getColumnModel().getColumn(7).setResizable(false);
        }

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Welcome:");

        jlbUser.setText("User");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("All tasks assigned to you are below");

        jbChangeWeek1.setText("1st week of May");
        jbChangeWeek1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbChangeWeek1ActionPerformed(evt);
            }
        });

        jLabel19.setText("To view all of your assigned tasks on the different weeks of this month press the buttons below.");

        jbChangeWeek4.setText("4th week of May");
        jbChangeWeek4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbChangeWeek4ActionPerformed(evt);
            }
        });

        jbChangeWeek2.setText("2nd week of May");
        jbChangeWeek2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbChangeWeek2ActionPerformed(evt);
            }
        });

        jbChangeWeek3.setText("3rd week of May");
        jbChangeWeek3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbChangeWeek3ActionPerformed(evt);
            }
        });

        jbChangeWeek5.setText("5th week of May");
        jbChangeWeek5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbChangeWeek5ActionPerformed(evt);
            }
        });

        jbAllTasks.setText("All Assigned Tasks");
        jbAllTasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAllTasksActionPerformed(evt);
            }
        });

        jtMonthlyHours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtMonthlyHoursActionPerformed(evt);
            }
        });

        jlHours.setText("Estimated hours for this month");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1278, Short.MAX_VALUE)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel19))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jlbUser))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jbChangeWeek1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jbChangeWeek2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jbChangeWeek3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jbChangeWeek4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jbChangeWeek5)
                                        .addGap(18, 18, 18)
                                        .addComponent(jbAllTasks))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jlHours)))
                        .addGap(18, 18, 18)
                        .addComponent(jtMonthlyHours, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(392, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jlbUser))
                .addGap(9, 9, 9)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel19)
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbChangeWeek1)
                    .addComponent(jbChangeWeek4)
                    .addComponent(jbChangeWeek2)
                    .addComponent(jbChangeWeek3)
                    .addComponent(jbChangeWeek5)
                    .addComponent(jbAllTasks))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtMonthlyHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlHours)
                    .addComponent(jButton1))
                .addGap(54, 54, 54))
        );

        jTabbedPane2.addTab("Daily Tasks", jPanel2);

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTUnassigned.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "task_id", "Task", "Notes", "Time (Hours)", "Assigned To", "Date Assigned"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTUnassigned.getTableHeader().setReorderingAllowed(false);
        jTUnassigned.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTUnassignedMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTUnassigned);
        if (jTUnassigned.getColumnModel().getColumnCount() > 0) {
            jTUnassigned.getColumnModel().getColumn(0).setResizable(false);
            jTUnassigned.getColumnModel().getColumn(1).setResizable(false);
            jTUnassigned.getColumnModel().getColumn(1).setPreferredWidth(250);
            jTUnassigned.getColumnModel().getColumn(2).setResizable(false);
            jTUnassigned.getColumnModel().getColumn(2).setPreferredWidth(250);
            jTUnassigned.getColumnModel().getColumn(3).setResizable(false);
            jTUnassigned.getColumnModel().getColumn(4).setResizable(false);
            jTUnassigned.getColumnModel().getColumn(5).setResizable(false);
        }

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 56, 1300, 300));

        jLabel3.setText("Welcome:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, -1));

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 470, -1, -1));

        jlbUser1.setText("User");
        jPanel3.add(jlbUser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 6, -1, -1));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("All tasks unassigned are below");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 35, 1288, -1));

        jBChooseTask.setText("Update!");
        jBChooseTask.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBChooseTaskMouseClicked(evt);
            }
        });
        jBChooseTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBChooseTaskActionPerformed(evt);
            }
        });
        jPanel3.add(jBChooseTask, new org.netbeans.lib.awtextra.AbsoluteConstraints(709, 412, -1, -1));

        jtfChooseTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfChooseTaskActionPerformed(evt);
            }
        });
        jPanel3.add(jtfChooseTask, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 416, 102, -1));

        jLabel6.setText("To take one of the unassigned tasks, just click the row on the above table and input your name into the text field and hit update! :)");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(73, 368, -1, -1));

        jtfNotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfNotesActionPerformed(evt);
            }
        });
        jPanel3.add(jtfNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 416, 170, -1));
        jPanel3.add(jtfTask, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 416, 173, -1));
        jPanel3.add(jtfTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(373, 416, 102, -1));

        jtfDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfDateActionPerformed(evt);
            }
        });
        jPanel3.add(jtfDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(589, 416, 102, -1));

        jLabel14.setText("Task");
        jPanel3.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(73, 390, -1, -1));

        jLabel15.setText("Notes");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(261, 390, -1, -1));

        jLabel16.setText("Time");
        jPanel3.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(406, 390, -1, -1));

        jLabel17.setText("Assigned To");
        jPanel3.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(501, 390, -1, -1));

        jLabel18.setText("Date Assigned");
        jPanel3.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(599, 390, -1, -1));

        jTabbedPane2.addTab("Unassigned Tasks", jPanel3);

        jtAllTasks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "task id", "Task", "Notes", "Time (Hours)", "Assigned To", "Date Assigned", "Completed"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtAllTasks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtAllTasksMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jtAllTasks);
        if (jtAllTasks.getColumnModel().getColumnCount() > 0) {
            jtAllTasks.getColumnModel().getColumn(0).setResizable(false);
            jtAllTasks.getColumnModel().getColumn(1).setResizable(false);
            jtAllTasks.getColumnModel().getColumn(1).setPreferredWidth(250);
            jtAllTasks.getColumnModel().getColumn(2).setResizable(false);
            jtAllTasks.getColumnModel().getColumn(2).setPreferredWidth(250);
            jtAllTasks.getColumnModel().getColumn(3).setResizable(false);
            jtAllTasks.getColumnModel().getColumn(4).setResizable(false);
            jtAllTasks.getColumnModel().getColumn(5).setResizable(false);
            jtAllTasks.getColumnModel().getColumn(6).setResizable(false);
        }

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Welcome:");

        jlbUser2.setText("User");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Below are all of the unassinged/assigned tasks which aren't completed");

        jLabel8.setText("If you wish to swap your task with another collegue then just click the row change the assigned to and hit change!");

        jtfNotes2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfNotes2ActionPerformed(evt);
            }
        });

        jtfChooseTask2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfChooseTask2ActionPerformed(evt);
            }
        });

        jBChooseTask2.setText("Update!");
        jBChooseTask2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBChooseTask2MouseClicked(evt);
            }
        });
        jBChooseTask2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBChooseTask2ActionPerformed(evt);
            }
        });

        jLabel9.setText("Task");

        jLabel10.setText("Notes");

        jLabel11.setText("Time");

        jLabel12.setText("Assigned To");

        jLabel13.setText("Date Assigned");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jtfTask2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfNotes2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtfTime2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfChooseTask2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBChooseTask2))
                            .addComponent(jLabel8)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jLabel9)
                        .addGap(156, 156, 156)
                        .addComponent(jLabel10)
                        .addGap(121, 121, 121)
                        .addComponent(jLabel11)
                        .addGap(61, 61, 61)
                        .addComponent(jLabel12)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel13)))
                .addGap(0, 518, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlbUser2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jlbUser2))
                .addGap(10, 10, 10)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfTask2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfNotes2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfTime2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfChooseTask2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBChooseTask2))
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("All Tasks", jPanel4);

        jLabel20.setText("Notes");

        jLabel21.setText("Time");

        jLabel22.setText("Assigned To");

        jLabel23.setText("If you want to take an overdue task of anothe collegue the fill out the boxes below.");

        jLabel24.setText("Date Assigned");

        jtfNotes3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfNotes3ActionPerformed(evt);
            }
        });

        jtfChooseTask3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfChooseTask3ActionPerformed(evt);
            }
        });

        jBChooseTask3.setText("Update!");
        jBChooseTask3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBChooseTask3MouseClicked(evt);
            }
        });
        jBChooseTask3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBChooseTask3ActionPerformed(evt);
            }
        });

        jLabel25.setText("Task");

        jLabel26.setText("Welcome:");

        jlbUser3.setText("User");

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("Below are all of the unassinged/assigned tasks which aren't completed");

        jtOverdue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "task id", "Task", "Notes", "Time (Hours)", "Assigned To", "Date Assigned", "Completed"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtOverdue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtOverdueMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jtOverdue);
        if (jtOverdue.getColumnModel().getColumnCount() > 0) {
            jtOverdue.getColumnModel().getColumn(0).setResizable(false);
            jtOverdue.getColumnModel().getColumn(1).setResizable(false);
            jtOverdue.getColumnModel().getColumn(1).setPreferredWidth(250);
            jtOverdue.getColumnModel().getColumn(2).setResizable(false);
            jtOverdue.getColumnModel().getColumn(2).setPreferredWidth(250);
            jtOverdue.getColumnModel().getColumn(3).setResizable(false);
            jtOverdue.getColumnModel().getColumn(4).setResizable(false);
            jtOverdue.getColumnModel().getColumn(5).setResizable(false);
            jtOverdue.getColumnModel().getColumn(6).setResizable(false);
        }

        jButton4.setText("Back");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlbUser3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(23, 23, 23))))
            .addComponent(jScrollPane6)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jtfTask3, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfNotes3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfTime3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfChooseTask3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfDate3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBChooseTask3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jLabel25)
                        .addGap(156, 156, 156)
                        .addComponent(jLabel20)
                        .addGap(121, 121, 121)
                        .addComponent(jLabel21)
                        .addGap(61, 61, 61)
                        .addComponent(jLabel22)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel24))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel23))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 534, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jlbUser3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfTask3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfNotes3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfTime3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfChooseTask3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfDate3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBChooseTask3))
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Over due tasks", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        String user = jlbUser.getText();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {
                String query = "SELECT * FROM employees WHERE emp_name =?";
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, user);
                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    String role = rs.getString("emp_role");
                    dispose();

                    if (role.equals("Technician")) {
                        TechnicianHome tf = new TechnicianHome();
                        tf.setVisible(true);
                        tf.setSize(800, 600);
                        tf.setLocationRelativeTo(null);
                        tf.jlbUser.setText(user);
                    }

                    if (role.equals("Customer Services")) {
                        CSHome cf = new CSHome();
                        cf.setVisible(true);
                        cf.setSize(800, 600);
                        cf.setLocationRelativeTo(null);
                        cf.jlbUser.setText(user);
                    }

                    if (role.equals("Finance")) {
                        FinanceHome ff = new FinanceHome();
                        ff.setVisible(true);
                        ff.setSize(800, 600);
                        ff.setLocationRelativeTo(null);
                        ff.jlbUser.setText(user);
                    }

                    if (role.equals("Human Resources")) {
                        CSHome hf = new CSHome();
                        hf.setVisible(true);
                        hf.setSize(800, 600);
                        hf.setLocationRelativeTo(null);
                        hf.jlbUser.setText(user);
                    }
                    if (role.equals("Manager") || role.equals("IT Services")) {
                        ManagerHome mf = new ManagerHome();
                        mf.setVisible(true);
                        mf.setSize(800, 600);
                        mf.setLocationRelativeTo(null);
                        mf.jlbUser.setText(user);
                    }

                }
            } catch (SQLException ex) {
                Logger.getLogger(ManageUser.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String user = jlbUser.getText();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {
                String query = "SELECT * FROM employees WHERE emp_name =?";
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, user);
                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    String role = rs.getString("emp_role");
                    dispose();

                    if (role.equals("Technician")) {
                        TechnicianHome tf = new TechnicianHome();
                        tf.setVisible(true);
                        tf.setSize(800, 600);
                        tf.setLocationRelativeTo(null);
                        tf.jlbUser.setText(user);
                    }

                    if (role.equals("Customer Services")) {
                        CSHome cf = new CSHome();
                        cf.setVisible(true);
                        cf.setSize(800, 600);
                        cf.setLocationRelativeTo(null);
                        cf.jlbUser.setText(user);
                    }

                    if (role.equals("Finance")) {
                        FinanceHome ff = new FinanceHome();
                        ff.setVisible(true);
                        ff.setSize(800, 600);
                        ff.setLocationRelativeTo(null);
                        ff.jlbUser.setText(user);
                    }

                    if (role.equals("Human Resources")) {
                        CSHome hf = new CSHome();
                        hf.setVisible(true);
                        hf.setSize(800, 600);
                        hf.setLocationRelativeTo(null);
                        hf.jlbUser.setText(user);
                    }
                    if (role.equals("Manager") || role.equals("IT Services")) {
                        ManagerHome mf = new ManagerHome();
                        mf.setVisible(true);
                        mf.setSize(800, 600);
                        mf.setLocationRelativeTo(null);
                        mf.jlbUser.setText(user);
                    }

                }
            } catch (SQLException ex) {
                Logger.getLogger(ManageUser.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        String user = jlbUser.getText();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {
                String query = "SELECT * FROM employees WHERE emp_name =?";
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, user);
                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    String role = rs.getString("emp_role");
                    dispose();

                    if (role.equals("Technician")) {
                        TechnicianHome tf = new TechnicianHome();
                        tf.setVisible(true);
                        tf.setSize(800, 600);
                        tf.setLocationRelativeTo(null);
                        tf.jlbUser.setText(user);
                    }

                    if (role.equals("Customer Services")) {
                        CSHome cf = new CSHome();
                        cf.setVisible(true);
                        cf.setSize(800, 600);
                        cf.setLocationRelativeTo(null);
                        cf.jlbUser.setText(user);
                    }

                    if (role.equals("Finance")) {
                        FinanceHome ff = new FinanceHome();
                        ff.setVisible(true);
                        ff.setSize(800, 600);
                        ff.setLocationRelativeTo(null);
                        ff.jlbUser.setText(user);
                    }

                    if (role.equals("Human Resources")) {
                        CSHome hf = new CSHome();
                        hf.setVisible(true);
                        hf.setSize(800, 600);
                        hf.setLocationRelativeTo(null);
                        hf.jlbUser.setText(user);
                    }
                    if (role.equals("Manager") || role.equals("IT Services")) {
                        ManagerHome mf = new ManagerHome();
                        mf.setVisible(true);
                        mf.setSize(800, 600);
                        mf.setLocationRelativeTo(null);
                        mf.jlbUser.setText(user);
                    }

                }
            } catch (SQLException ex) {
                Logger.getLogger(ManageUser.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jBChooseTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBChooseTaskActionPerformed

        String assigned = jtfChooseTask.getText();
        String date_assigned = jtfDate.getText();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {
                String query = "UPDATE task SET assignedTo=?, date_assigned=? where task_id=?";
                PreparedStatement ps = con.prepareStatement(query);

                int row = jTUnassigned.getSelectedRow();
                String cell = jTUnassigned.getModel().getValueAt(row, 0).toString();
                ps.setString(3, cell);
                ps.setString(2, date_assigned);
                ps.setString(1, assigned);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Updated successfully");
                updateTable();

            } catch (SQLException ex) {
                Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jBChooseTaskActionPerformed

    private void updateTable() {
        DefaultTableModel model = (DefaultTableModel) jTUnassigned.getModel();
        DefaultTableModel model2 = (DefaultTableModel) jtAllTasks.getModel();
        DefaultTableModel model3 = (DefaultTableModel) jtOverdue.getModel();
        model.setRowCount(0);
        model2.setRowCount(0);
        model3.setRowCount(0);
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {
                String query = "SELECT * FROM unassigned_tasks";
                String query2 = "SELECT * FROM all_tasks";
                String query3 = "SELECT * FROM overdueTask";

                PreparedStatement ps = con.prepareStatement(query);
                PreparedStatement ps2 = con.prepareStatement(query2);
                PreparedStatement ps3 = con.prepareStatement(query3);

                ResultSet rs = ps.executeQuery();
                ResultSet rs2 = ps2.executeQuery();
                ResultSet rs3 = ps3.executeQuery();

                while (rs.next()) {
                    String taskid = rs.getString("task_id");
                    String task = rs.getString("task");
                    String notes = rs.getString("notes");
                    String time_needed = rs.getString("time_needed");
                    String assigned = rs.getString("assignedTo");
                    String date_assigned = rs.getString("date_assigned");
                    String completed = rs.getString("completed");
                    String date_completed = rs.getString("date_completed");
                    String time_used = rs.getString("time_used");
                    model.addRow(new Object[]{taskid, task, notes, time_needed, assigned, date_assigned, completed, date_completed, time_used});
                    jTUnassigned.setModel(model);
                }

                while (rs2.next()) {
                    String taskid2 = rs2.getString("task_id");
                    String task2 = rs2.getString("task");
                    String notes2 = rs2.getString("notes");
                    String time_needed2 = rs2.getString("time_needed");
                    String assigned2 = rs2.getString("assignedTo");
                    String dateAssigned2 = rs2.getString("date_assigned");
                    String completed2 = rs2.getString("completed");
                    model2.addRow(new Object[]{taskid2, task2, notes2, time_needed2, assigned2, dateAssigned2, completed2});
                    jtAllTasks.setModel(model2);
                }

                while (rs3.next()) {
                    String taskid3 = rs3.getString("task_id");
                    String task3 = rs3.getString("task");
                    String notes3 = rs3.getString("notes");
                    String time_needed3 = rs3.getString("time_needed");
                    String assigned3 = rs3.getString("assignedTo");
                    String date_assigned3 = rs3.getString("date_assigned");
                    String completed3 = rs3.getString("completed");
                    String date_completed3 = rs3.getString("date_completed");
                    String time_used3 = rs3.getString("time_used");
                    model3.addRow(new Object[]{taskid3, task3, notes3, time_needed3, assigned3, date_assigned3, completed3, date_completed3, time_used3});
                    jtOverdue.setModel(model3);
                }

            } catch (SQLException ex) {
                Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    private void jBChooseTaskMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBChooseTaskMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jBChooseTaskMouseClicked

    private void jTUnassignedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTUnassignedMouseClicked
        int row = jTUnassigned.getSelectedRow();
        String selection = jTUnassigned.getModel().getValueAt(row, 0).toString();
        String query = "SELECT * FROM task WHERE task_id = " + selection;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {
                PreparedStatement ps = con.prepareStatement(query);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    jtfTask.setText(rs.getString("task"));
                    jtfNotes.setText(rs.getString("notes"));
                    jtfTime.setText(rs.getString("time_needed"));
                    jtfChooseTask.setText(rs.getString("assignedTo"));
                    jtfDate.setText(rs.getString("date_assigned"));

                }
            } catch (SQLException ex) {
                Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jTUnassignedMouseClicked

    private void jtfChooseTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfChooseTaskActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfChooseTaskActionPerformed

    private void jtfNotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfNotesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfNotesActionPerformed

    private void jtfNotes2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfNotes2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfNotes2ActionPerformed

    private void jtfChooseTask2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfChooseTask2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfChooseTask2ActionPerformed

    private void jBChooseTask2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBChooseTask2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jBChooseTask2MouseClicked

    private void jBChooseTask2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBChooseTask2ActionPerformed

        String assigned = jtfChooseTask2.getText();
        String date_assigned = jtfDate2.getText();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {
                String query = "UPDATE task SET assignedTo=?, date_assigned=? where task_id=?";
                PreparedStatement ps = con.prepareStatement(query);

                int row = jtAllTasks.getSelectedRow();
                String cell = jtAllTasks.getModel().getValueAt(row, 0).toString();
                ps.setString(3, cell);
                ps.setString(2, date_assigned);
                ps.setString(1, assigned);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Updated successfully");
                updateTable();

            } catch (SQLException ex) {
                Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jBChooseTask2ActionPerformed

    private void jtAllTasksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtAllTasksMouseClicked
        int row = jtAllTasks.getSelectedRow();
        String selection = jtAllTasks.getModel().getValueAt(row, 0).toString();
        String query = "SELECT * FROM task WHERE task_id = " + selection;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {
                PreparedStatement ps = con.prepareStatement(query);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    jtfTask2.setText(rs.getString("task"));
                    jtfNotes2.setText(rs.getString("notes"));
                    jtfTime2.setText(rs.getString("time_needed"));
                    jtfChooseTask2.setText(rs.getString("assignedTo"));
                    jtfDate2.setText(rs.getString("date_assigned"));

                }
            } catch (SQLException ex) {
                Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jtAllTasksMouseClicked


    private void jtfDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfDateActionPerformed

    private void jbChangeWeek1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbChangeWeek1ActionPerformed
        String user = jlbUser.getText();
        DefaultTableModel model = (DefaultTableModel) jtbTask.getModel();
        model.setRowCount(0);
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {

                if (user.equals("Anita")) {

                    String query = "SELECT * FROM anita_tasks_1stweek_ofMay";
                    String query2 = "SELECT * FROM 1stweekMay_hours_anita";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();

                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }

                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Luke")) {
                    String query = "SELECT * FROM Luke_tasks_1stweek_ofMay";
                    String query2 = "SELECT * FROM 1stweekMay_hours_luke";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();

                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }

                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Dave")) {
                    String query = "SELECT * FROM Dave_tasks_1stweek_ofMay";
                    String query2 = "SELECT * FROM 1stweekMay_hours_Dave";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();
                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Mike")) {
                    String query = "SELECT * FROM Mike_tasks_1stweek_ofMay";
                    String query2 = "SELECT * FROM 1stweekMay_hours_Mike";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();

                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbChangeWeek1ActionPerformed

    private void jbChangeWeek4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbChangeWeek4ActionPerformed
        String user = jlbUser.getText();
        DefaultTableModel model = (DefaultTableModel) jtbTask.getModel();
        model.setRowCount(0);
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {

                if (user.equals("Anita")) {

                    String query = "SELECT * FROM anita_tasks_4thweek_ofMay";
                    String query2 = "SELECT * FROM 4thweekMay_hours_anita";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();

                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Luke")) {
                    String query = "SELECT * FROM Luke_tasks_4thweek_ofMay";
                    String query2 = "SELECT * FROM 4thweekMay_hours_luke";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();
                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Dave")) {
                    String query = "SELECT * FROM Dave_tasks_4thweek_ofMay";
                    String query2 = "SELECT * FROM 4thweekMay_hours_Dave";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();

                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Mike")) {
                    String query = "SELECT * FROM Mike_tasks_4thweek_ofMay";
                    String query2 = "SELECT * FROM 4thweekMay_hours_Mike";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();

                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbChangeWeek4ActionPerformed

    private void jbChangeWeek2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbChangeWeek2ActionPerformed
        String user = jlbUser.getText();
        DefaultTableModel model = (DefaultTableModel) jtbTask.getModel();
        model.setRowCount(0);
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {

                if (user.equals("Anita")) {

                    String query = "SELECT * FROM anita_tasks_2ndweek_ofMay";
                    String query2 = "SELECT * FROM 2ndweekMay_hours_anita";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();
                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Luke")) {
                    String query = "SELECT * FROM Luke_tasks_2ndweek_ofMay";
                    String query2 = "SELECT * FROM 2ndweekMay_hours_luke";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();

                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Dave")) {
                    String query = "SELECT * FROM Dave_tasks_2ndweek_ofMay";
                    String query2 = "SELECT * FROM 2ndweekMay_hours_Dave";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();

                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Mike")) {
                    String query = "SELECT * FROM Mike_tasks_2ndweek_ofMay";
                    String query2 = "SELECT * FROM 2ndweekMay_hours_Mike";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();
                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbChangeWeek2ActionPerformed

    private void jbChangeWeek3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbChangeWeek3ActionPerformed
        String user = jlbUser.getText();
        DefaultTableModel model = (DefaultTableModel) jtbTask.getModel();
        model.setRowCount(0);
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {

                if (user.equals("Anita")) {

                    String query = "SELECT * FROM anita_tasks_3rdweek_ofMay";
                    String query2 = "SELECT * FROM 3rdweekMay_hours_anita";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();
                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Luke")) {
                    String query = "SELECT * FROM Luke_tasks_3rdweek_ofMay";
                    String query2 = "SELECT * FROM 3rdweekMay_hours_luke";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();
                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Dave")) {
                    String query = "SELECT * FROM Dave_tasks_3rdweek_ofMay";
                    String query2 = "SELECT * FROM 3rdweekMay_hours_Dave";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();
                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Mike")) {
                    String query = "SELECT * FROM mike_tasks_3rdweek_ofmay";
                    String query2 = "SELECT * FROM 3rdweekMay_hours_Mike";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();
                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbChangeWeek3ActionPerformed

    private void jbChangeWeek5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbChangeWeek5ActionPerformed
        String user = jlbUser.getText();
        DefaultTableModel model = (DefaultTableModel) jtbTask.getModel();
        model.setRowCount(0);
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {

                if (user.equals("Anita")) {

                    String query = "SELECT * FROM anita_tasks_5thweek_ofMay";
                    String query2 = "SELECT * FROM 5thweekMay_hours_anita";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();

                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Luke")) {
                    String query = "SELECT * FROM Luke_tasks_5thweek_ofMay";
                    String query2 = "SELECT * FROM 5thweekMay_hours_luke";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();

                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Dave")) {
                    String query = "SELECT * FROM Dave_tasks_5thweek_ofMay";
                    String query2 = "SELECT * FROM 5thweekMay_hours_Dave";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();
                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }
                if (user.equals("Mike")) {
                    String query = "SELECT * FROM Mike_tasks_5thweek_ofMay";
                    String query2 = "SELECT * FROM 5thweekMay_hours_Mike";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);
                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();

                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Total hours for this week");

                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbChangeWeek5ActionPerformed

    private void jbAllTasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAllTasksActionPerformed
        String user = jlbUser.getText();
        DefaultTableModel model = (DefaultTableModel) jtbTask.getModel();
        model.setRowCount(0);
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {

                if (user.equals("Anita")) {

                    String query = "SELECT * FROM anita_tasks";
                    String query2 = "SELECT * FROM monthly_hours_anita";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    // ps2.setString(0, dt.jtMonthlyHours.getText());
                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();

                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Estimated hours for this month");

                    }
                }
                if (user.equals("Luke")) {
                    String query = "SELECT * FROM luke_tasks";
                    String query2 = "SELECT * FROM monthly_hours_Luke";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    // ps2.setString(0, dt.jtMonthlyHours.getText());
                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();

                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Estimated hours for this month");

                    }
                }
                if (user.equals("Dave")) {
                    String query = "SELECT * FROM dave_tasks";
                    String query2 = "SELECT * FROM monthly_hours_Dave";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    // ps2.setString(0, dt.jtMonthlyHours.getText());
                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();
                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Estimated hours for this month");

                    }
                }
                if (user.equals("Mike")) {
                    String query = "SELECT * FROM mike_tasks";
                    String query2 = "SELECT * FROM monthly_hours_Mike";

                    PreparedStatement ps = con.prepareStatement(query);
                    PreparedStatement ps2 = con.prepareStatement(query2);

                    // ps2.setString(0, dt.jtMonthlyHours.getText());
                    ResultSet rs = ps.executeQuery();
                    ResultSet rs2 = ps2.executeQuery();

                    while (rs.next()) {
                        String task = rs.getString("task");
                        String notes = rs.getString("notes");
                        String time_needed = rs.getString("time_needed");
                        String assigned = rs.getString("assignedTo");
                        String completed = rs.getString("completed");
                        model.addRow(new Object[]{task, notes, time_needed, assigned, completed});
                        jtbTask.setModel(model);
                        updateTable();
                    }
                    while (rs2.next()) {

                        jtMonthlyHours.setText(rs2.getString("Total Hours"));
                        jlHours.setText("Estimated hours for this month");

                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbAllTasksActionPerformed

    private void jtMonthlyHoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtMonthlyHoursActionPerformed

    }//GEN-LAST:event_jtMonthlyHoursActionPerformed

    private void jtAllTasks1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtAllTasks1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtAllTasks1MouseClicked

    private void jtfNotes3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfNotes3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfNotes3ActionPerformed

    private void jtfChooseTask3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfChooseTask3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfChooseTask3ActionPerformed

    private void jBChooseTask3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBChooseTask3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jBChooseTask3MouseClicked

    private void jBChooseTask3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBChooseTask3ActionPerformed
        String assigned = jtfChooseTask3.getText();
        String date_assigned = jtfDate3.getText();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {
                String query = "UPDATE task SET assignedTo=?, date_assigned=? where task_id=?";
                PreparedStatement ps = con.prepareStatement(query);

                int row = jtOverdue.getSelectedRow();
                String cell = jtOverdue.getModel().getValueAt(row, 0).toString();
                ps.setString(3, cell);
                ps.setString(2, date_assigned);
                ps.setString(1, assigned);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Updated successfully");
                updateTable();

            } catch (SQLException ex) {
                Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBChooseTask3ActionPerformed

    private void jtOverdueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtOverdueMouseClicked
        int row = jtOverdue.getSelectedRow();
        String selection = jtOverdue.getModel().getValueAt(row, 0).toString();
        String query = "SELECT * FROM task WHERE task_id = " + selection;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {
                PreparedStatement ps = con.prepareStatement(query);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    jtfTask3.setText(rs.getString("task"));
                    jtfNotes3.setText(rs.getString("notes"));
                    jtfTime3.setText(rs.getString("time_needed"));
                    jtfChooseTask3.setText(rs.getString("assignedTo"));
                    jtfDate3.setText(rs.getString("date_assigned"));

                }
            } catch (SQLException ex) {
                Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dailyTask.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jtOverdueMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        String user = jlbUser.getText();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vulture", "root", "24652066")) {
                String query = "SELECT * FROM employees WHERE emp_name =?";
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, user);
                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    String role = rs.getString("emp_role");
                    dispose();

                    if (role.equals("Technician")) {
                        TechnicianHome tf = new TechnicianHome();
                        tf.setVisible(true);
                        tf.setSize(800, 600);
                        tf.setLocationRelativeTo(null);
                        tf.jlbUser.setText(user);
                    }

                    if (role.equals("Customer Services")) {
                        CSHome cf = new CSHome();
                        cf.setVisible(true);
                        cf.setSize(800, 600);
                        cf.setLocationRelativeTo(null);
                        cf.jlbUser.setText(user);
                    }

                    if (role.equals("Finance")) {
                        FinanceHome ff = new FinanceHome();
                        ff.setVisible(true);
                        ff.setSize(800, 600);
                        ff.setLocationRelativeTo(null);
                        ff.jlbUser.setText(user);
                    }

                    if (role.equals("Human Resources")) {
                        CSHome hf = new CSHome();
                        hf.setVisible(true);
                        hf.setSize(800, 600);
                        hf.setLocationRelativeTo(null);
                        hf.jlbUser.setText(user);
                    }
                    if (role.equals("Manager") || role.equals("IT Services")) {
                        ManagerHome mf = new ManagerHome();
                        mf.setVisible(true);
                        mf.setSize(800, 600);
                        mf.setLocationRelativeTo(null);
                        mf.jlbUser.setText(user);
                    }

                }
            } catch (SQLException ex) {
                Logger.getLogger(ManageUser.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dailyTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dailyTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dailyTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dailyTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dailyTask().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBChooseTask;
    private javax.swing.JButton jBChooseTask2;
    private javax.swing.JButton jBChooseTask3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTUnassigned;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JToggleButton jbAllTasks;
    private javax.swing.JToggleButton jbChangeWeek1;
    private javax.swing.JToggleButton jbChangeWeek2;
    private javax.swing.JToggleButton jbChangeWeek3;
    private javax.swing.JToggleButton jbChangeWeek4;
    private javax.swing.JToggleButton jbChangeWeek5;
    private javax.swing.JLabel jlHours;
    public javax.swing.JLabel jlbUser;
    public javax.swing.JLabel jlbUser1;
    public javax.swing.JLabel jlbUser2;
    public javax.swing.JLabel jlbUser3;
    private javax.swing.JTable jtAllTasks;
    private javax.swing.JTable jtAllTasks1;
    public javax.swing.JTextField jtMonthlyHours;
    private javax.swing.JTable jtOverdue;
    public javax.swing.JTable jtbTask;
    private javax.swing.JTextField jtfChooseTask;
    private javax.swing.JTextField jtfChooseTask2;
    private javax.swing.JTextField jtfChooseTask3;
    private javax.swing.JTextField jtfDate;
    private javax.swing.JTextField jtfDate2;
    private javax.swing.JTextField jtfDate3;
    private javax.swing.JTextField jtfNotes;
    private javax.swing.JTextField jtfNotes2;
    private javax.swing.JTextField jtfNotes3;
    private javax.swing.JTextField jtfTask;
    private javax.swing.JTextField jtfTask2;
    private javax.swing.JTextField jtfTask3;
    private javax.swing.JTextField jtfTime;
    private javax.swing.JTextField jtfTime2;
    private javax.swing.JTextField jtfTime3;
    // End of variables declaration//GEN-END:variables
}
